apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-parcelize'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.novoda.build-properties'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: "io.gitlab.arturbosch.detekt"
apply plugin: "scabbard.gradle"

buildProperties {
    secrets {
        using rootProject.file('properties/secrets.properties')
    }
    env {
        using System.getenv()
    }
}

android {
    compileSdk 34

    defaultConfig {
        applicationId "net.aiscope.gdd_app"
        minSdkVersion 23
        targetSdkVersion 33
        versionCode 32
        versionName "2.1.12"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        buildConfigString 'SMARTLOOK_API_KEY', (buildProperties.secrets['SMARTLOOK_API_KEY'] | buildProperties.env['SMARTLOOK_API_KEY']) | ""
    }

    buildFeatures {
        viewBinding = true
    }

    signingConfigs {
        release {
            storeFile file("../gdd.jks")
            keyAlias 'gdd'
            storePassword((buildProperties.secrets['STORE_PW'].or(buildProperties.env['STORE_PW']) | "").string)
            keyPassword((buildProperties.secrets['KEY_PW'].or(buildProperties.env['KEY_PW']) | "").string)
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            firebaseCrashlytics {
                mappingFileUploadEnabled false
            }
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    testOptions {
        animationsDisabled = true
    }

    // Always show the result of every unit test, even if it passes.
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = "17"
    }

    namespace 'net.aiscope.gdd_app'
}

kotlin {
    jvmToolchain(17)
}

scabbard {
    enabled true
}

detekt {
    config = files("$rootProject.projectDir/detekt-config.yml")
    buildUponDefaultConfig = true
}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'com.karumi:dexter:6.2.3'
    implementation 'com.github.salomonbrys.kotson:kotson:2.5.0'
    implementation 'androidx.work:work-runtime-ktx:2.8.1'
    implementation 'androidx.core:core-ktx:1.10.1'
    implementation 'androidx.activity:activity-ktx:1.7.2'
    implementation 'androidx.fragment:fragment-ktx:1.5.7'
    implementation 'com.github.chrisbanes:PhotoView:2.3.0'
    implementation 'androidx.viewpager2:viewpager2:1.0.0'
    implementation 'com.google.android.material:material:1.8.0'

    // Firebase
    implementation platform("com.google.firebase:firebase-bom:32.6.0")
    implementation 'com.google.firebase:firebase-analytics'
    implementation 'com.google.firebase:firebase-crashlytics'
    implementation 'com.google.firebase:firebase-common-ktx'
    implementation 'com.google.firebase:firebase-storage-ktx'
    implementation 'com.google.firebase:firebase-firestore-ktx'
    implementation 'com.firebaseui:firebase-ui-auth:8.0.2'
    implementation "com.google.android.gms:play-services-auth:20.7.0"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-play-services:$kotlin_coroutines_version"

    // Smartlook – screen recording
    implementation 'com.smartlook.recording:app:1.7.0-native'

    // Timber – logging
    implementation 'com.jakewharton.timber:timber:5.0.1'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'

    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test:rules:1.5.0'
    androidTestImplementation 'androidx.test:runner:1.5.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation 'androidx.test.espresso:espresso-intents:3.5.1'

    androidTestImplementation 'com.github.fabioCollini.daggermock:daggermock:0.8.5'
    androidTestImplementation 'com.github.fabioCollini.daggermock:daggermock-kotlin:0.8.5'

//    androidTestImplementation 'com.github.tmurakami:dexopener:2.0.3'
//    androidTestImplementation "org.mockito:mockito-inline:$mockito_version"
//    androidTestImplementation "org.mockito:mockito-android:$mockito_version"
    androidTestImplementation('com.nhaarman:mockito-kotlin:1.6.0') {
        exclude group: 'org.jetbrains.kotlin'
    }
    androidTestImplementation "com.linkedin.dexmaker:dexmaker-mockito-inline:2.28.3"

    //TODO: use library again when it moves to mavenCentral from JCenter
    //androidTestImplementation 'com.azimolabs.conditionwatcher:conditionwatcher:0.2'
    androidTestImplementation project(":conditionwatcher-0.2")



    // Test
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'com.nitorcreations:matchers:1.3'
    testImplementation "org.mockito:mockito-core:$mockito_version"
    testImplementation "org.mockito:mockito-inline:$mockito_version"
    testImplementation 'com.nhaarman:mockito-kotlin:1.6.0'
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$kotlin_coroutines_version"
    testImplementation "androidx.arch.core:core-testing:2.2.0"


    // Capture - FotoApparat
    implementation 'io.fotoapparat:fotoapparat:2.7.0'


    // Dagger
    implementation "com.google.dagger:dagger:$dagger_version"
    implementation "com.google.dagger:dagger-android-support:$dagger_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"
    kapt "com.google.dagger:dagger-android-processor:$dagger_version"

    compileOnly 'javax.annotation:jsr250-api:1.0'
}
